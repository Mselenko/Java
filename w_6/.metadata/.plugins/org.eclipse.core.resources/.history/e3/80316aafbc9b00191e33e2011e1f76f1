package task_1;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Optional;

import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputDialog;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class ButtonActions {

	ATMPanel panel;
	Account dsp[] = new Account[10];
	public Stage MainStage = new Stage();

	ButtonActions(ATMPanel panel, Account[] dsp) {
		this.panel = panel;
		this.dsp = dsp;
	}

	public void submit() throws FileNotFoundException, IOException, ClassNotFoundException {

		if (panel.accountNumber.getText().matches("[0-9]+")) {

			int account = Integer.parseInt(panel.accountNumber.getText());

			ObjectInputStream read = new ObjectInputStream(new FileInputStream("account.dat"));

			for (int i = 0; i < 10; i++) {
				dsp[i] = (Account) read.readObject();
			}

			boolean flag = false;

			for (int i = 0; i < 10; i++) {
				if (dsp[i].getId() == account) {

					if (dsp[i].getPin() == 0) {
						create_pin(dsp[i]);

					} else {
						showAccountDetails();
					}

					flag = true;
				}

			}

			if (!flag) {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setHeaderText("ID does not exist, try again");
				alert.showAndWait();
			}
		}

	}

	public void create_pin(Account account) {

		TextField pin = new TextField();
		GridPane register = new GridPane();
		register.setAlignment(Pos.CENTER);
		register.setPadding(new Insets(15, 15, 15, 15));
		register.setVgap(5);
		register.setHgap(5);

		register.add(new Label("Your Account does not have PIN. Please Create your PIN"), 0, 1);
		register.add(new Label("Enter your new PIN:"), 0, 2);
		register.add(pin, 1, 2);
		Button create = new Button("Create PIN");
		register.add(create, 1, 3);
		create.setOnAction(e -> {
			if (pin.getText().matches("[0-9]+")) {
				account.setPin(Integer.parseInt(pin.getText()));
				System.out.println(account.getPin());
				Button main = new Button("Go to Main Menu");
				main.setOnAction(ec -> {
					showAccountDetails();
				});

				register.add(new Label("PIN was created successfully"), 1, 5);
				register.add(main, 1, 6);
			}else {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle(null);
				alert.setHeaderText(null);
				alert.setContentText("PIN must contain only digits, please try again");
				alert.showAndWait();
			}

		});

		Scene scene_reg = new Scene(register, 600, 300);
		MainStage.setTitle("ATM");
		MainStage.setScene(scene_reg);
		MainStage.show();

	}

	public void showAccountDetails() {

		TextField pin = new TextField();
		TextField account_number = new TextField();
		Button login = new Button("Login");
		GridPane pane_ex = new GridPane();
		pane_ex.setAlignment(Pos.CENTER);
		pane_ex.setPadding(new Insets(11, 12, 13, 14));
		pane_ex.setHgap(5);
		pane_ex.setVgap(5);

		pane_ex.add(new Label("Enter your account number : "), 0, 1);
		pane_ex.add(account_number, 1, 1);
		pane_ex.add(new Label("Enter the pin for your account : "), 0, 2);
		pane_ex.add(pin, 1, 2);

		pane_ex.add(login, 1, 3);

		login.setOnAction(e -> {
			if(account_number.getText().matches("[0-9]+") && pin.getText().matches("[0-9]+")) {
				Login(Integer.parseInt(account_number.getText()), Integer.parseInt(pin.getText()));
			}
			else {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle(null);
				alert.setHeaderText(null);
				alert.setContentText("PIN and Account must contain only digits, please try again");
				alert.showAndWait();
			}
		});

		GridPane.setHalignment(login, HPos.RIGHT);
		Scene scene = new Scene(pane_ex, 600, 300);
		MainStage.setTitle("ATM");
		MainStage.setScene(scene);
		MainStage.show();

	}

	public void Login(int account, int pin) {

		for (int i = 0; i < 10; i++) {
			if (dsp[i].getId() == account) {

				if (dsp[i].getPin() == pin) {

					GridPane pane_ex = new GridPane();
					pane_ex.setAlignment(Pos.CENTER);
					
					pane_ex.setHgap(5);
					pane_ex.setVgap(5);

					Button check = new Button("Check Balance");

					check.setOnAction(e -> {

						balanceCheck(account);

					});

					Button withdraw = new Button("Withdraw money");
					withdraw.setOnAction(e -> withdrawMoney(account));

					Button exit = new Button("Exit the Account");
					exit.setOnAction(e -> showAccountDetails());
					
					GridPane.setHalignment(withdraw, HPos.LEFT);

					pane_ex.add(new Label("Welcome Account " + account), 0, 1);
					pane_ex.add(new Label("What Would you like to do?"), 0, 2);
					pane_ex.add(check, 0, 3);
					pane_ex.add(withdraw, 0, 4);
					pane_ex.add(exit, 0, 5);

					Scene scene = new Scene(pane_ex, 600, 300);
					MainStage.setTitle("ATM");
					MainStage.setScene(scene);
					MainStage.show();

				} else {
					Alert alert = new Alert(AlertType.INFORMATION);
					alert.setHeaderText("PIN is not correct, try again");
					alert.showAndWait();
				}
			}
		}
	}

	public void balanceCheck(int account) {
		for (int i = 0; i < 10; i++) {
			if (dsp[i].getId() == account) {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Balance");
				alert.setHeaderText(null);
				alert.setContentText("Your current balance is " + dsp[i].getBalance());
				alert.showAndWait();
			}
		}
	}

	public void withdrawMoney(int account) {

		for (int i = 0; i < 10; i++) {
			if (dsp[i].getId() == account) {

				TextInputDialog dialog = new TextInputDialog();
				dialog.setTitle("Withdraw money");
				dialog.setHeaderText(null);
				dialog.setContentText("Please enter amount of money you want to withdraw: ");

				Optional<String> result = dialog.showAndWait();
				if (result.isPresent()) {

					if(result.get().matches("[0-9]+")){
					if (Integer.parseInt(result.get()) > dsp[i].getBalance()) {
						Alert alert = new Alert(AlertType.INFORMATION);
						alert.setTitle(null);
						alert.setHeaderText(null);
						alert.setContentText("Withdraw amount is bigger than balance");
						alert.showAndWait();
					} else {
						dsp[i].withdraw(Integer.parseInt(result.get()));
						Alert alert = new Alert(AlertType.INFORMATION);
						alert.setTitle(null);
						alert.setHeaderText(null);
						alert.setContentText("Withdraw amount processed successfully");
						alert.showAndWait();
					}
					}else {
						Alert alert = new Alert(AlertType.INFORMATION);
						alert.setTitle(null);
						alert.setHeaderText(null);
						alert.setContentText("Please enter digits only");
						alert.showAndWait();
						
					}

				}
			}
		}

	}
}
