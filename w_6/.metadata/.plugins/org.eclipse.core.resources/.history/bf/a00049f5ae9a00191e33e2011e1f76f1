import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.sql.Date;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.scene.layout.GridPane;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.geometry.Pos;
import javafx.geometry.HPos;
import javafx.geometry.Insets;

public class TesterClass extends Application
{
	/*************************************************************************/
	// Fields and variables declaration
	public TextField account_number=new TextField();
	public TextField pin=new TextField();
	
	public TextField withdraw_amount=new TextField();
	public Button money_withdraw=new Button("Withdraw");
	public Button register_pin=new Button("Create New Pin");
	public Button try_again=new Button("Try Again");
	public Button login=new Button("Login");
	public Stage MainStage=new Stage();
	public TextField error=new TextField();
	public GridPane pane=new GridPane();
	public GridPane register=new GridPane();
	public Button check_balance=new Button("Check Balance");
	public Button withdraw=new Button("Withdraw Money");
	public Button exit=new Button("Exit the Account");
	public Button main_menu=new Button("Go To Main Menu");
	public Button main_menu2=new Button("Go To Main Menu");
	public Label Welcome_message=new Label("WELCOME TO ONLINE BANKING");
	/************************************************************************/
	public void start(Stage stage)
	{
		/********************************************************************/
		//pane settings
		
		pane.setAlignment(Pos.CENTER);
		pane.setPadding(new Insets(11,12,13,14));
		pane.setHgap(5);
		pane.setVgap(5);
		/******************************************************************/
		// Designing the Pane
		pane.add(Welcome_message, 0,0);
		pane.add(new Label("Enter your account number : "),0,1);
		pane.add(account_number, 1,1);
		pane.add(new Label("Enter the pin for your account : "), 0, 2);
		pane.add(pin,1,2);
		pane.add(register_pin,1,3);
		register_pin.setOnAction(e->{
			try {
				REGISTER_PIN();
			} catch (FileNotFoundException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			} catch (ClassNotFoundException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
		});
		pane.add(login, 1,3);
		/******************************************************************/
		login.setOnAction(e->{
			try {
				Login();
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		});
		/****************************************************************/
		GridPane.setHalignment(Welcome_message, HPos.CENTER);
		GridPane.setHalignment(register_pin,HPos.LEFT);
		GridPane.setHalignment(login, HPos.RIGHT);
		Scene scene=new Scene(pane,800,500);
		MainStage.setTitle("ATM");
		MainStage.setScene(scene);
		MainStage.show();
		
		
		/******************************************************************/
	}
/****************************************************************************************/
//LOGIN FUNCTION that CHECKS USER CREDENTIALS
	public void Login() throws FileNotFoundException, IOException, ClassNotFoundException
	{
		int account=Integer.parseInt(account_number.getText());
		int password=Integer.parseInt(pin.getText());
		// De-serialization of Objects
		Account [] dsp=new Account[10];
		for(int i=0;i<10;i++)
		{
			dsp[i]=new Account();			
		}
		
		ObjectInputStream read=new ObjectInputStream(new FileInputStream("account.dat"));
		for(int i=0;i<10;i++)
		{
			dsp[i]=(Account)read.readObject();
		}
		/////////////////////////////////////////////////////////////////
		for(int i=0;i<10;i++)
		{
			if(dsp[i].getId()==account)
			{
				if(dsp[i].getPin()==password)
				{
					GridPane pane_in=new GridPane();
					pane_in.setAlignment(Pos.CENTER);
					pane_in.setPadding(new Insets(11,12,13,14));
					pane_in.setHgap(5);
					pane_in.setVgap(5);
					///////////////////////////////////////////////////////////
					pane_in.add(new Label("Welcome Account "+account), 0, 0);
					pane_in.add(check_balance, 0, 1);
					check_balance.setOnAction(e->{
						try {
							check_balance(account);
						} catch (FileNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					});
					pane_in.add(withdraw, 0, 2);
					withdraw.setOnAction(e->{
						try {
							Withdraw(account);
						} catch (FileNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					});
					pane_in.add(exit, 0, 3);
					exit.setOnAction(e->ShowMain());
					Scene scene1=new Scene(pane_in,400,500);
					MainStage.setTitle("ATM");
					MainStage.setScene(scene1);
					MainStage.show();
					MainStage.setResizable(false);
					
				}
				else
				{
					pane.add(new Label("YOUR PIN DOES NOT MATCH WITH YOUR ACCOUNT, PLEASE TRY AGAIN OR REGISTER NEW PIN CODE" ),0,4);
									
				}
			}
			
			
		}
		
		
		
		
		
	}
/****************************************************************************************/
// REGISTER PIN FUNCTION FOR REGISTERING THE PIN CODE	
	
	public void REGISTER_PIN() throws FileNotFoundException, IOException, ClassNotFoundException
	{
		
		register.setAlignment(Pos.CENTER);
		register.setPadding(new Insets(11,12,13,14));
		register.setVgap(5);
		register.setHgap(5);
		
		register.add(new Label("Enter the following credentials"),0,0);
		register.add(new Label("Enter your account number:"), 0, 1);
		register.add(account_number, 1, 1);
		register.add(new Label("Enter your new PIN:"), 0,2);
		register.add(pin,1,2);
		Button create=new Button("Create PIN");
		register.add(create, 1, 3);
		create.setOnAction(e->{
			try {
				create_pin();
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		});
		GridPane.setHalignment(create,HPos.RIGHT);
		Scene scene_reg=new Scene(register,400,500);
		MainStage.setTitle("ATM");
		MainStage.setScene(scene_reg);
		MainStage.show();
		
		
		
		
	}
	
/****************************************************************************************/

	// FUNCTION USED TO CREATE NEW PIN
	public void create_pin() throws FileNotFoundException, IOException, ClassNotFoundException
	{
		int account=Integer.parseInt(account_number.getText());
		int pin_code=Integer.parseInt(pin.getText());
		/*System.out.print("Good JOB");
		GridPane register1=new GridPane();
		register1.setAlignment(Pos.CENTER);
		register1.setPadding(new Insets(11,12,13,14));
		register1.setVgap(5);
		register1.setHgap(5);
		register1.add(main_menu2, 0, 3);
		 main_menu2.setOnAction(e->{
				try {
					MainMenu(account);
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			});
		GridPane.setHalignment(main_menu,HPos.RIGHT);
		Scene scene_reg1=new Scene(register1,400,500);
		MainStage.setTitle("ATM");
		MainStage.setScene(scene_reg1);
		MainStage.show();
	}*/
		
		GridPane register1=new GridPane();
		register1.setAlignment(Pos.CENTER);
		register1.setPadding(new Insets(11,12,13,14));
		register1.setVgap(5);
		register1.setHgap(5);
		// De-serialization of Objects
				Account [] dsp=new Account[10];
				for(int i=0;i<10;i++)
				{
					dsp[i]=new Account();			
				}
				
				ObjectInputStream read=new ObjectInputStream(new FileInputStream("account.dat"));
				for(int i=0;i<10;i++)
				{
					dsp[i]=(Account)read.readObject();
				}
				/////////////////////////////////////////////////////////////////
				
				
				for(int i=0;i<10;i++)
				{
					if(dsp[i].getPin()!=0&&dsp[i].getId()==account)
					{
						register1.add(new Label("You already have your password set up"),0,6);
						register1.add(main_menu2, 0, 3);
						 main_menu2.setOnAction(e->{
								try {
									MainMenu(account);
								} catch (FileNotFoundException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								} catch (ClassNotFoundException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								} catch (IOException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							});
						break;
						
					}
					else if(dsp[i].getPin()==0&&dsp[i].getId()==account)
					{
						
						register1.add(new Label("PIN created successfully"),0,6);
						register1.add(main_menu2, 0, 3);
						 main_menu2.setOnAction(e->{
								try {
									MainMenu(account);
								} catch (FileNotFoundException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								} catch (ClassNotFoundException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								} catch (IOException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							});
						
						/***********************************************************/
		      
						Account []objects=new Account[10];
						ObjectOutputStream output=new ObjectOutputStream(new FileOutputStream("account.dat"));
						for(int j=0;j<10;j++)
						{
							objects[j]=new Account();
							if(dsp[j].getBalance()<100)
							{
								double balance=dsp[j].getBalance();
								objects[j].setBalance(balance);
							}
							else
							{
								objects[j].setBalance(100);
							}
							objects[j].First_Name="OBJECT "+(j+1)+" FIRST_NAME";
							objects[j].Last_Name="OBJECT "+(j+1)+" LAST_NAME";
							objects[j].setId(j+101);
							objects[j].setPin(123);
							if(objects[j].getId()==account)
							{
								objects[j].setPin(pin_code);
							}
							output.writeObject(objects[j]);
						}
						
						
					
					
					}
				
				}
				
				GridPane.setHalignment(main_menu,HPos.RIGHT);
				Scene scene_reg1=new Scene(register1,400,500);
				MainStage.setTitle("ATM");
				MainStage.setScene(scene_reg1);
				MainStage.show();
				
	}
				

				

	
/****************************************************************************************/
//WITHDRAW BUTTON ACTION
	public void Withdraw(int account) throws FileNotFoundException, IOException, ClassNotFoundException
  {
		double balance=0;

		// De-serialization of Objects
				Account [] dsp=new Account[10];
				for(int i=0;i<10;i++)
				{
					dsp[i]=new Account();			
				}
				
				ObjectInputStream read=new ObjectInputStream(new FileInputStream("account.dat"));
				for(int i=0;i<10;i++)
				{
					dsp[i]=(Account)read.readObject();
				}
				/////////////////////////////////////////////////////////////////
				for(int i=0;i<10;i++)
				{
					if(dsp[i].getId()==account)
					{
						balance=dsp[i].getBalance();
					}
				}
				
				
	  GridPane pane_withdraw=new GridPane();
	  pane_withdraw.setAlignment(Pos.CENTER);
	  pane_withdraw.setPadding(new Insets(11,12,13,14));
	  pane_withdraw.setHgap(5);
	  pane_withdraw.setVgap(5);
	  pane_withdraw.add(new Label("Your current balance is "+balance+"$"),0,0 );
	  pane_withdraw.add(new Label("Amount of money you want to withdraw:"), 0, 1);
	  pane_withdraw.add(withdraw_amount, 1, 1);
	  pane_withdraw.add(main_menu, 0, 2);
	  main_menu.setOnAction(e->{
			try {
				MainMenu(account);
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		});
	  pane_withdraw.add(money_withdraw, 1, 2);
	  money_withdraw.setOnAction(e->{
		try {
			WithdrawMoney(account);
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	});
	  Scene scene_withdraw=new Scene(pane_withdraw,400,500);
	  MainStage.setTitle("ATM");
	  MainStage.setScene(scene_withdraw);
      MainStage.show();	  
	  
	  
	  
  }
/*****************************************************************************************/
//WithdrawMoney FUNCTION USED TO WITHDRAW MONEY FROM THE ACCOUNT
	public void WithdrawMoney(int account) throws FileNotFoundException, IOException, ClassNotFoundException
	{
		double balance=0;

		// De-serialization of Objects
				Account [] dsp=new Account[10];
				for(int i=0;i<10;i++)
				{
					dsp[i]=new Account();			
				}
				
				ObjectInputStream read=new ObjectInputStream(new FileInputStream("account.dat"));
				for(int i=0;i<10;i++)
				{
					dsp[i]=(Account)read.readObject();
				}
				/////////////////////////////////////////////////////////////////
				for(int i=0;i<10;i++)
				{
					if(dsp[i].getId()==account)
					{
						balance=dsp[i].getBalance();
					}
				}
			
				double amount_withdraw=Double.parseDouble(withdraw_amount.getText());
				
				GridPane pane_balance=new GridPane();
				pane_balance.setAlignment(Pos.CENTER);
				pane_balance.setPadding(new Insets(11,12,13,14));
				pane_balance.setHgap(5);
				pane_balance.setVgap(5);
				
				if(balance<amount_withdraw)
				{
					pane_balance.add(new Label("Your withdraw amount is greater than your Balance, please try again."),0,1);
					pane_balance.add(try_again, 0, 3);
					try_again.setOnAction(e->{
						try {
							Withdraw(account);
						} catch (FileNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					});
				}
				else
				{
					balance-=amount_withdraw;
					for(int i=0;i<10;i++)
					{
						if(dsp[i].getId()==account)
						{
							dsp[i].setBalance(balance);
						}
					}
					
					pane_balance.add(new Label("Your requested withdraw was successful"), 0, 1);
					pane_balance.add(new Label("Your new BALANCE is "+balance+"$"), 0, 2);
					pane_balance.add(main_menu, 0, 3);
					/***********************************************************/
					Account []objects=new Account[10];
					ObjectOutputStream output=new ObjectOutputStream(new FileOutputStream("account.dat"));
					for(int i=0;i<10;i++)
					{
						objects[i]=new Account();
						objects[i].setBalance(100);
						objects[i].First_Name="OBJECT "+(i+1)+" FIRST_NAME";
						objects[i].Last_Name="OBJECT "+(i+1)+" LAST_NAME";
						objects[i].setId(i+101);
						if(dsp[i].getPin()!=123)
						{objects[i].setPin(dsp[i].getPin());}
						else {
						objects[i].setPin(123);}
						
						if(objects[i].getId()==account)
						{
							objects[i].setBalance(balance);
						}
						output.writeObject(objects[i]);
					}
					
					
					/**********************************************************/
					main_menu.setOnAction(e->{
						try {
							MainMenu(account);
						} catch (FileNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					});
				}
				Scene scene_balance=new Scene(pane_balance,400,500);
				MainStage.setTitle("ATM");
				MainStage.setScene(scene_balance);
				MainStage.show();
				
	}
/****************************************************************************************/
// FUNCTION USED TO REDIRECT THE USER TO THE FIRST SCREEN WHERE IT ASKS FOR USR ACCOUNT AND PIN	
	public void ShowMain()
	{  
		GridPane pane_ex=new GridPane();
		pane_ex.setAlignment(Pos.CENTER);
		pane_ex.setPadding(new Insets(11,12,13,14));
		pane_ex.setHgap(5);
		pane_ex.setVgap(5);
		/******************************************************************/
		// Designing the Pane
		pane_ex.add(Welcome_message, 0,0);
		pane_ex.add(new Label("Enter your account number : "),0,1);
		pane_ex.add(account_number, 1,1);
		pane_ex.add(new Label("Enter the pin for your account : "), 0, 2);
		pane_ex.add(pin,1,2);
		
		pane_ex.add(register_pin,1,3);
		
		pane_ex.add(login, 1,3);
		/******************************************************************/
		login.setOnAction(e->{
			try {
				Login();
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		});
		/****************************************************************/
		GridPane.setHalignment(Welcome_message, HPos.CENTER);
		GridPane.setHalignment(register_pin,HPos.LEFT);
		GridPane.setHalignment(login, HPos.RIGHT);
		Scene scene=new Scene(pane_ex,800,500);
		MainStage.setTitle("ATM");
		MainStage.setScene(scene);
		MainStage.show();
		
	}
/****************************************************************************************/
//FUNCTION USED TO DISPLAY USER CURRENT REMAINING BALANCE	
	public void check_balance(int account) throws FileNotFoundException, IOException, ClassNotFoundException
	{
		// De-serialization of Objects
				Account [] dsp=new Account[10];
				for(int i=0;i<10;i++)
				{
					dsp[i]=new Account();			
				}
				
				ObjectInputStream read=new ObjectInputStream(new FileInputStream("account.dat"));
				for(int i=0;i<10;i++)
				{
					dsp[i]=(Account)read.readObject();
				}
				/////////////////////////////////////////////////////////////////
				
				for(int i=0;i<10;i++)
				{
					if(dsp[i].getId()==account)
					{
						
						GridPane pane_balance=new GridPane();
						pane_balance.setAlignment(Pos.CENTER);
						pane_balance.setPadding(new Insets(11,12,13,14));
						pane_balance.setHgap(5);
						pane_balance.setVgap(5);
						
						pane_balance.add(new Label("Your CURRENT BALANCE is "+dsp[i].getBalance()+"$"),0,0);
						pane_balance.add(main_menu, 0, 1);
						main_menu.setOnAction(e->{
							try {
								MainMenu(account);
							} catch (FileNotFoundException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							} catch (ClassNotFoundException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							} catch (IOException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						});
						GridPane.setHalignment(main_menu, HPos.RIGHT);
						Scene scene_balance=new Scene(pane_balance,400,500);
						MainStage.setTitle("ATM");
						MainStage.setScene(scene_balance);
						MainStage.show();
						
					}
				}
				
				
	}
	
/****************************************************************************************/
// FUNCTION USED TO SHOW THE USER AVAILABLE OPTIONS WHEN HE/SHE LOGS INTO THE SYSTEM
	public void MainMenu(int account) throws FileNotFoundException, IOException, ClassNotFoundException
	{
		
		Account [] dsp=new Account[10];
		for(int i=0;i<10;i++)
		{
			dsp[i]=new Account();			
		}
		
		ObjectInputStream read=new ObjectInputStream(new FileInputStream("account.dat"));
		for(int i=0;i<10;i++)
		{
			dsp[i]=(Account)read.readObject();
		}
		/////////////////////////////////////////////////////////////////
		// SETTING THE PANE
		GridPane pane_in=new GridPane();
		pane_in.setAlignment(Pos.CENTER);
		pane_in.setPadding(new Insets(11,12,13,14));
		pane_in.setHgap(5);
		pane_in.setVgap(5);
		///////////////////////////////////////////////////////////
		pane_in.add(new Label("Welcome Account "+account), 0, 0);
		pane_in.add(check_balance, 0, 1);
		check_balance.setOnAction(e->{
			try {
				check_balance(account);
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		});
		pane_in.add(withdraw, 0, 2);
		withdraw.setOnAction(e->{
			try {
				Withdraw(account);
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		});
		pane_in.add(exit, 0, 3);
		exit.setOnAction(e->ShowMain());
		Scene scene1=new Scene(pane_in,400,500);
		MainStage.setTitle("ATM");
		MainStage.setScene(scene1);
		MainStage.show();
		MainStage.setResizable(false);
	}
/****************************************************************************************/	
///////////////////////// MAIN FUNCTION OF THE PROGRAM  /////////////////////////////////
	
	public static void main(String[] args) throws FileNotFoundException, IOException
	{
		/*Account []objects=new Account[10];
		ObjectOutputStream output=new ObjectOutputStream(new FileOutputStream("account.dat"));
		for(int i=0;i<10;i++)
		{
			objects[i]=new Account();
			objects[i].setBalance(100);
			objects[i].First_Name="OBJECT "+(i+1)+" FIRST_NAME";
			objects[i].Last_Name="OBJECT "+(i+1)+" LAST_NAME";
			objects[i].setId(i+101);
			if(i==1)
			{objects[i].setPin(0);}
			else {
			objects[i].setPin(123);}
			output.writeObject(objects[i]);
		}*/
		launch(args);
	}
	
}
/***************************************************************************************/



/***************************************************************************************/

// DECLARATION Of ACCOUNT Class

class Account implements Serializable
{   /********************************/
	// Declaration of all required variables
	private int pin;
	private int id;
	public String First_Name;
	public String Last_Name;
	private double balance;
	private double annualInterestRate;
	private Date dateCreated;
	/*******************************/
	// No argument Constructor
	public Account()
	{
		this.id=0;
		this.balance=0;
		this.annualInterestRate=0;
		this.pin=0;
	}
	// ID , BALANCE Argument constructor 
	public Account(int specified_id,double in_balance)
	{
		this.id=specified_id;
		this.balance=in_balance;
	}
	//mutator method for id
	public int getId()
	{
		return this.id;
	}
	//mutator method for balance
	public double getBalance()
	{
		return this.balance;
	}
	
	//mutator method for annualInterestRate
	public double getInterestRate()
	{
		return this.annualInterestRate;
	}
	
	//accessor method for id
	public void setId(int newId)
	{
		this.id=newId;
	}
	//accessor method for balance
	public void setBalance(double newBalance)
	{
		this.balance=newBalance;
	}
	//accessor method for annualInterestRate
	public void annualInterestRate(double newRate)
	{
		this.annualInterestRate=newRate;
	} 
	//accessor method for dateCreated
	public void setDate(Date newDate)
	{
		dateCreated=newDate;
	}
	//getMonthlyInterestRate method 
	public double getMonthlyInterestRate()
	{
		return annualInterestRate/12;
	}
	//getMonthlyInterest() method
	public double getMonthlyInterest()
	{
		return balance*getMonthlyInterestRate();
	}
	//withdraw method 
	public void withdraw(double am)
	{
		balance=balance-am;
	}
	
	//deposit method 
	public void deposit(double amount)
	{
		balance+=amount;
	}
	
	//accessor method for Pin
	public void setPin(int newPin)
	{
		this.pin=newPin;
	}
	//mutator method for Pin
	public int getPin()
	{
		return this.pin;
	}
}