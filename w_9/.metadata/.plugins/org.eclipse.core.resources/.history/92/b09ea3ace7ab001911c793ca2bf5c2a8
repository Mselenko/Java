package task_1;

public class TesterClass {

	static double[][] matrix1 = new double[2000][2000];
	static double[][] matrix2 = new double[2000][2000];
	static double[][] result = new double[2000][2000];

	
	public static void main(String[] args) {

		long time_before, time_after;

		for (int i = 0; i < 2000; i++) 
		{
			for (int j = 0; j < 2000; j++) 
			{
				matrix1[i][j] = j;
				matrix2[i][j] = j;
			}
		}

		
		time_before = System.currentTimeMillis();
		sequentialAddMatrix(matrix1, matrix2);
		time_after = System.currentTimeMillis();
		System.out.println("Time of Sequential adding excecution in milliseconds: " + (time_after - time_before) + " msecs");

		time_before = System.currentTimeMillis();
		parallelAddMatrix(matrix1, matrix2);
		time_after = System.currentTimeMillis();
		System.out.println("Time of Parallel adding excecution in milliseconds: " + (time_after - time_before) + " msecs");

	}

	
	public static void sequentialAddMatrix(double[][] m1, double[][] m2) 
	{
		
		for (int i = 0; i < 2000; i++) 
		{
			for (int j = 0; j < 2000; j++) 
			{
				result[i][j] = m1[i][j] + m2[i][j];
			}
		}
	}

	public static void parallelAddMatrix(double[][] m1, double[][] m2) 
	{
		Thread t1 = new Thread(new Runnable() 
		{
			public void run() {
				addMatrix(0, 1000);
			}
		});

		Thread t2 = new Thread(new Runnable() {
			public void run() {
				addMatrix(1000, 2000);
			}
		});
		


		
		t1.start();
//		try 
//		{
//			t1.join();
//		} catch (InterruptedException e) 
//		{
//			e.printStackTrace();
//		}
		t2.start();
		
	

	}

	public static void addMatrix(int start, int size) {

		System.out.println(Thread.currentThread().getId());
		for (int i = start; i < size; i++) {
			for (int j = start; j < size; j++) {
				result[i][j] = matrix1[i][j] + matrix2[i][j];
			}
		}
	}

}
