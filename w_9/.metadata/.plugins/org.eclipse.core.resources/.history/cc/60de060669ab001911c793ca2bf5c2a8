package task_1;




class ThreadJoining extends Thread 
{ 
    @Override
    public void run() 
    { 
        for (int i = 0; i < 2; i++) 
        { 
            try
            { 
                Thread.sleep(500); 
                System.out.println("Current Thread: "
                        + Thread.currentThread().getName()); 
            } 
  
            catch(Exception ex) 
            { 
                System.out.println("Exception has" + 
                                " been caught" + ex); 
            } 
            System.out.println(i); 
        } 
    } 
}


public class TesterClass 
{
	
	
	static double[][] matrix1 = new double[2000][2000];
	static double[][] matrix2 = new double[2000][2000];
	
	
	
	public static void main(String[] args) 
	{
		
		long time_before, time_after;
		
		for (int i = 0; i < 2000; i++) 
		{
			for (int j = 0; j<2000;j++) 
			{
				matrix1[i][j] = j;
				matrix2[i][j] = j;
			}
		}
		
		time_before = System.currentTimeMillis();
		sequentialAddMatrix(matrix1,matrix2);
		time_after =System.currentTimeMillis();
		System.out.println("Time of Sequential adding excecution in milliseconds: "+ (time_after-time_before) + " msecs");
		
		time_before = System.currentTimeMillis();
		parallelAddMatrix(matrix1,matrix2);
		time_after =System.currentTimeMillis();
		System.out.println("Time of Parallel adding excecution in milliseconds: "+ (time_after-time_before) + " msecs");
		
		
	}
	

	public static void sequentialAddMatrix(double[][] m1, double[][] m2)
		{

		double[][] result = new double[2000][2000];
		
		for (int i = 0; i < 2000; i++) 
		{
			for (int j = 0; j<2000;j++) 
			{
				result[i][j] = m1[i][j] + m2[i][j];
			}
		}
	} 

	
	
	
	
	
	
	public static double[][] parallelAddMatrix(double[][] m1, double[][] m2)
	{
		
		  	ThreadJoining t1 = new ThreadJoining(); 
		  	
	        ThreadJoining t2 = new ThreadJoining(); 
	        ThreadJoining t3 = new ThreadJoining(); 
	  
	 
	        t1.start(); 
	  

	        try
	        { 
	            System.out.println("Current Thread: "
	                  + Thread.currentThread().getName()); 
	            t1.join(); 
	        } 
	  
	        catch(Exception ex) 
	        { 
	            System.out.println("Exception has " + 
	                                "been caught" + ex); 
	        } 
	  
	      
	        t2.start(); 
	  
		
		
		double[][] result = null;
		
		return result;
	} 
	


}
