package server;

import javafx.application.Application;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.NoSuchElementException;
import java.util.Scanner;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.ScrollPane.ScrollBarPolicy;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class Server extends Application {

//    private TextField tf = new TextField();
    private ServerSocket serverSocket;
    private Socket socket;
    private DataInputStream input ;
    private DataOutputStream output;

    TextArea ta = new TextArea();
    String message;
    private ArrayList<NewClient> clients = new ArrayList<>();

    
    @Override // Override the start method in the Application class
    public void start(Stage primaryStage) {


        // Create a server socket
        BorderPane borderPaneForText = new BorderPane();
//        Button btnSend = new Button("|>");
//        btnSend.setOnAction( e-> {
//
//            Platform.runLater( () -> {
//                try{
//
//                    output.writeUTF(tf.getText());
//                    showMessage("server: " + tf.getText() + "\n");
//
//                }
//                catch(IOException ex){
//                    ex.printStackTrace();
//                }
//            });
//        });

//        tf.setAlignment(Pos.BOTTOM_RIGHT);

        ta.setEditable(false);
        ta.appendText("MultiThreadServer started at " + new Date() + '\n');
      
//        borderPaneForText.setCenter(tf);
//        borderPaneForText.setRight(btnSend);
        borderPaneForText.setPadding( new Insets( 5, 5, 5, 5) );

        BorderPane mainPane = new BorderPane();
        mainPane.setTop(new ScrollPane(ta));
        mainPane.setCenter(borderPaneForText);

        // Create a scene and place it in the stage
        Scene scene = new Scene(mainPane, 450, 270);
        primaryStage.setTitle("Server"); // Set the stage title
        primaryStage.setScene(scene); // Place the scene in the stage
        primaryStage.show(); // Display the stage

        
        
//        callServer();
//    }
        
//        new Thread( () -> {
//            try {
//                
//                serverSocket = new ServerSocket(4000);
////                Platform.runLater(() ->
////                        ta.appendText("Server started at " + new Date() + '\n'));
//
//                
//                Socket socket = serverSocket.accept();
//
//               
//                input = new DataInputStream( socket.getInputStream() );
//                output = new DataOutputStream(socket.getOutputStream());
//
//                while (true) {
//                   
//                    message = input.readUTF();
//              
//                    output.writeUTF(message);
//                    
//                    
//                    Platform.runLater(() -> {
//                        ta.appendText("Client: " + message + "\n");
//                    });
//                }
//            }
//            catch(IOException ex) {
//                ex.printStackTrace();
//            }
//        }).start();
//    }

        
       // public  void  callServer() { 
        
        
           
     	   try ( ServerSocket serverSocket = new ServerSocket(3000);){
     		  
   
     		   while(true) {
     			  
//     			new Thread( () -> {      
     		    Socket socket = serverSocket.accept();
     		    NewClient newClient = new NewClient(socket);
     		    newClient.start();
     		    clients.add(newClient);
//     			 }).start();
     		   }
     		  } catch (IOException e) {
     		   e.printStackTrace();
     		  }
     		 
    }
     		
        
        
        class NewClient extends Thread {
     		  private Socket socket;
     		  //private PrintWriter toClient;
     		  
     		  public NewClient(Socket socket) {
     		   this.socket = socket;
     		   //Thread thread = new Thread(this);
     		  // thread.start();
     		  }
     		  
     		  public void run() {
     			  
     		   try {
     			 input = new DataInputStream( socket.getInputStream() );
     			 output = new DataOutputStream(socket.getOutputStream());

     		    
     		   Platform.runLater(() ->
     		   		ta.appendText("Server started at " + new Date() + '\n'));
     		  
     		  
     		    ta.appendText("Connection from  " + socket + "at "+new Date()+"\n");
     		  
     		    while(true) {
     		    	
     		    	message = input.readUTF();
                  
                        output.writeUTF(message);
                        
                        
                        Platform.runLater(() -> {
                            ta.appendText("Client: " + message + "\n");
                        });
     		     
     		   
     		     System.out.println(message + "\n");
     		     for (NewClient newClient : clients) {
     		      newClient.send(message);
     		     }
     		    }
     		   } catch (IOException e) {
     		    e.printStackTrace();
     		   } catch (NoSuchElementException e) {    
     		   }
     		  }
     		
     		  
     		  
     		  public void send(String text) {
     		   Calendar time = new GregorianCalendar();
     		   try {
				output.writeUTF(text + "\n");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
     		   try {
				output.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
     		  }
     		  
     		 }
   
    
    
    
    
    public static void main(String[] args) {
        launch(args);
//        Server e =new Server();
//    	e.callServer();
//        
    }




    public void showMessage(String message){

        Platform.runLater( () -> {
            ta.appendText(message);

        });
    }



}