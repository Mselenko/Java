package client;



import javafx.application.Application;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.NoSuchElementException;
import java.util.Scanner;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.ScrollPane.ScrollBarPolicy;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;



public class Client extends Application {
    // IO streams
    DataOutputStream toServer = null;
    DataInputStream fromServer = null;
    String serverMessage = "";

@Override // Override the start method in the Application class
public void start(Stage primaryStage) {
// Panel p to hold the label and text field
BorderPane paneForTextField = new BorderPane();
Button btnSend = new Button("|>");
paneForTextField.setPadding(new Insets(5, 5, 5, 5)); 
paneForTextField.setStyle("-fx-border-color: green");
paneForTextField.setRight( btnSend );

TextField tf = new TextField();
tf.setAlignment(Pos.BOTTOM_RIGHT);
paneForTextField.setCenter(tf);

BorderPane mainPane = new BorderPane();
//Text area to display contents
TextArea ta = new TextArea();
mainPane.setTop(new ScrollPane(ta));
mainPane.setCenter(paneForTextField);

//Create a scene and place it in the stage
Scene scene = new Scene(mainPane, 450, 270);
primaryStage.setTitle("Client"); // Set the stage title
primaryStage.setScene(scene); // Place the scene in the stage
primaryStage.show(); // Display the stage

tf.setOnAction(e -> {
try {
// Get the message from the text field
String message = tf.getText().trim();

// Send the message to the server
toServer.writeBytes(message);
toServer.flush();
System.out.println("message sent");
tf.setText("");

// Display to the text area
ta.appendText("client: " + message + "\n");


}
catch (IOException ex) {
System.err.println(ex);
}
});

try {
// Create a socket to connect to the server
Socket socket = new Socket("localhost", 5000);
// Socket socket = new Socket("130.254.204.36", 8000);
// Socket socket = new Socket("drake.Armstrong.edu", 8000);

// Create an input stream to receive data from the server
fromServer = new DataInputStream( socket.getInputStream() );

// Create an output stream to send data to the server
toServer = new DataOutputStream( socket.getOutputStream() );


new Thread(() -> {
try{
    while(true){
        serverMessage = fromServer.readUTF();

        System.out.println("message received");

        Platform.runLater( () -> {

            ta.appendText(serverMessage);

        });


    }
}
catch(IOException e){
    ta.appendText(e.toString() + "\n");
}

}).start();
}
catch (IOException ex) {
ta.appendText(ex.toString() + '\n');
}
}

public static void main(String[] args) {
    launch(args);
}
}
